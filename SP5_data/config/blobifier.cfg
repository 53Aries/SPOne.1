# Include servo hardware definition separately to allow for automatic upgrade
#[include blobifier_hw.cfg]

#purge_len = params.FV

##########################################################################################

# Sample config to be used in conjunction with Blobifier Purge Tray, Bucket & Nozzle 
# Scrubber mod. Created by Dendrowen (dendrowen on Discord). The Macro is based on a 
# version, and Nozzle Scrubber is made by Hernsl (hernsl#8860 on Discord). The device is 
# designed around a Voron V2.4 300mm, but should work for 250mm and 350mm too. This 
# version only supports the assembly on the rear-left of the bed. If you decide to change 
# that, please consider contributing to the project by creating a pull request with the 
# needed changes.

# IMPORTANT: The rear-left part of your bed becomes unusable by this mod because the 
#            toolhead needs to lower down to 0. Be sure not to use the left-rear 130x35mm.

# The goals of this combination of devices is to dispose of purged filament during a 
# multicolored print without the need of a purge block and without the flurries of
# filament poops consuming your entire 3D printer room. The Blobifier achieves that by
# purging onto a retractable tray which causes the filament to turn into a tiny blob 
# rather then a large spiral. This keeps the waste relativly small. The bucket should be
# able to account for up to 200 filament swaps (for the 300mm V2).

# Upload this file to your klipper config directory and include it in printer.cfg
# [include mmu/addons/blobifier.cfg]

# It is advised to use the start_gcode from Happy Hare. Then you will be able to fully 
# and efficiently use this mod. Check the Happy Hare document at gcode_preprocessing.md 
# in the Happy Hare github for more details.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the 
# emergency stop.

##########################################################################################

##########################################################################################
# Main macro. Usually you should only need to call this one or place it in the Happy Hare
# _MMU_POST_LOAD macro or variable_user_post_load_extension:
# PURGE_LENGTH=[float] (optional) The length to purge. If ommited it will check the 
#                      purge_volumes matrix or variable_purge_length
# PURGE_RET=[float]    (optional) The length to retract between moves
#
[gcode_macro BLOBIFIER]
# These parameters define your filament purging. The retract variable is used to retract 
# right after purging to prevent unnecessary oozing. Some filament are particularly oozy 
# and may continue to ooze out of the nozzle for a second or two after retracting. Update 
# as necessary.
variable_purge_spd:            400	     # Speed, in mm/min, of the purge.
variable_purge_temp_min:       200	     # Minimum nozzle purge temperature.
variable_retract_before_park:  1.0       # amount in mm. 0 to disable
variable_retract_speed:       2000       # mm/m
variable_travel_spd_z:      600	

# Location of where to purge. The tray is 15mm in length, so if you assemble it against 
# the side of the bed (default), 10mm is a good location
variable_purge_x: 290
variable_purge_y: 290



# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. iteration_z_raise    |
# |                                     | Incr. max_iteration_length |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Incr. iteration_z_change   |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Decr. iteration_z_change   |
# |         later iterations            |                            |
# +-------------------------------------+----------------------------+
# |        I think my blobs can         | Balsy... Increase          |
# |          be much bigger!            | max_iterations_per_blob    |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start: 0.2

# The maximum mm of filament (length) to extrude one iteration. A blob contains multiple 
# iterations
variable_max_iteration_length: 30

# The amount to raise Z for each iteration
variable_iteration_z_raise: 10

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced.
variable_iteration_z_change: 0.8

# Maximum iterations per blob. 3 Should be sufficient for most flushes. If not, Blobifier 
# will create multiple blobs for a single purge.
variable_max_iterations_per_blob: 3

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop: 1.0

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 1000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1              # Leave it unchanged
#variable_part_cooling_fan:  0              # Disable the fan
variable_part_cooling_fan:  1               # Run it at full speed


# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 60

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 30

# The slicer values often are a bit too wastefull. Tune it here to get optimal values. 0.6
# is a good starting point.
variable_purge_length_modifier: 0

# Length of filament to add after the purge volume. Purge volumes don't always take 
# cutters into account and therefor a swap from red to white might be long enough, but 
# from white to red can be far too short. When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 0

# ========================================================================================
# ==================== BUCKET ============================================================
# ========================================================================================

# Maximum number of blobs that fit in the bucket. Pauses the print if it exceeds this 
# number.
variable_max_blobs: 400000000


gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  
  SAVE_GCODE_STATE NAME=BLOBIFIER_state

  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="BLOBIFIER: Not homed! Home xyz before blobbing"
  {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}
    RESPOND MSG="BLOBIFIER: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}
    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = printer.fan.speed %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set restore_z = [printer['gcode_macro BLOBIFIER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y %}

    
    
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.FV %} # ======= PARAM PURGE LENGTH ==============================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.FV|float %}
    
    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float %}
    {% endif %}
    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("BLOBIFIER: Purging %.2fmm of filament" % (purge_len|float))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}

      # ====================================================================================
      # ==================== POSITIONING ===================================================
      # ====================================================================================
      
       
      # Move over to the tray
      G1 X{purge_x} F6000
      G1 Y{purge_y} F6000

      
      # ====================================================================================
      # ==================== POSITIONING ON TRAY ===========================================
      # ====================================================================================
      G1 Z{purge_start} F{travel_spd_z}

     

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}

      # Repeat the process until purge_len is reached
      {% for n in range(iterations) %}
      
        # Calculate current iteration in current blob
        {% set step = n % max_iterations_per_blob %}

        {% if step == 0 %}
          G1 Z{purge_start} F600
        {% endif %}

        # Determine the amount to extrude. Either the remaining purge_len or 
        # max_iteration_length.
        {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
        {% set extrude_amount = [purge_amount_left,max_iteration_length]|min %}
        {% set extrude_ratio = extrude_amount / max_iteration_length %}

        # relative positioning
        G91 
        M83

        # Calculate the amount z has to be raised
        # If step equals 0, the start position of the nozzle is already a little higher.
        {% set step_triangular = step * (step + 1) / 2 %}
        {% set z_raise_substract = purge_start if step == 0 else 
          step_triangular * iteration_z_change %}
        {% set raise_z = (iteration_z_raise - z_raise_substract) * extrude_ratio %}

        # make sure raise_z never goes negative, dropping the nozzle while purging.
        {% set raise_z = [raise_z,0]|max %}

        # Calculate the raise speed based on the purge speed.
        {% set duration = extrude_amount / purge_spd %} 
        {% set speed = raise_z / duration %}
      
        # Purge one iteration
        G1 E1 F{speed}
        G1 Z{raise_z} E{extrude_amount} F{speed}

        # Movement to remove blob from buildplate
        G1 E-.3
        G1 Z{eject_hop} F{travel_spd_z}
        M106 S255
        G4 P6000
        G1 X-40 F4000
        G1 Y-40 F4000
        G90 
        G1 Z1 F{travel_spd_z}
        G91
        G1 X50 F8000
        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================
        {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
        {% set purge_length_reached = purge_len - max_iteration_length * (n+1) <= 0 %}
        {% if max_iterations_reached or purge_length_reached %}
          # Raise z a bit to relieve pressure on the blob preventing it to go sideways
          G1 E-.3
          G1 Z{eject_hop} F{travel_spd_z}
          # Movement to remove blob from buildplate
          
          M106 S255
          G4 P6000
          G1 X-40 F4000
          G1 Y-40 F4000
          G90 
          G1 Z1 F{travel_spd_z}
          G91
          G1 X50 F8000
         
          G90
          
          # Keep track of the # of blobs
          _BLOBIFIER_COUNT
        {% endif %}
      {% endfor %}
    {% endif %}
    
    G4 P{pressure_release_time}

    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================

    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 

##########################################################################################
[gcode_macro BLOBIFIER_PARK]
variable_restore_z: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y %}

  SET_GCODE_VARIABLE MACRO=BLOBIFIER_PARK VARIABLE=restore_z VALUE={pos.z}

  SAVE_GCODE_STATE NAME=blobifier_park_state
  
  

  RESTORE_GCODE_STATE NAME=blobifier_park_state

##########################################################################################
# Increment the blob count with 1 and check if the bucket is full. Pause 
# the printer if it is.
#
[gcode_macro _BLOBIFIER_COUNT]
# Don't change these variables
variable_current_blobs: 0
variable_last_shake: 0
variable_next_shake: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% if current_blobs >= bl.max_blobs %}
    {action_respond_info("BLOBIFIER: Empty purge bucket!")}
    M117 Empty purge bucket!
    PAUSE
  {% else %}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE={current_blobs + 1}
    _BLOBIFIER_SAVE_STATE
    {action_respond_info(
      "BLOBIFIER: Blobs in bucket: %s/%s. Next shake @ %s" 
      % (current_blobs + 1, bl.max_blobs, next_shake)
    )}
  {% endif %}

##########################################################################################
# Reset the blob count to 0
#
[gcode_macro _BLOBIFIER_COUNT_RESET]
gcode:
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE=0
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE=0
  _BLOBIFIER_SAVE_STATE
  

##########################################################################################

##########################################################################################
# Some sanity checks
#
[delayed_gcode BLOBIFIER_INIT]
initial_duration: 5.0
gcode:
  _BLOBIFIER_INIT
  

[gcode_macro _BLOBIFIER_INIT]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set raise_z_min = (bl.iteration_z_raise - ((bl.max_iterations_per_blob - 1) * (bl.max_iterations_per_blob) / 2) * bl.iteration_z_change) %}
  
  # No drop on purging
  {% if raise_z_min < 0 %} 
    {action_emergency_stop("BLOBIFIER: Your current blob settings cause the nozzle to drop on the final iteration(s). increase iteration_z_raise or decrease either iteration_z_change or max_iterations_per_blob.")}
  {% endif %}

  # Valid part cooling fan setting
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("BLOBIFIER: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (bl.part_cooling_fan))}
  {% endif %}

  


[delayed_gcode BLOBIFIER_LOAD_STATE]
initial_duration: 2.0 # Give it some time to boot up
gcode:
  {% set sv = printer.save_variables.variables.blobifier %}

  {% if sv %}
    # Restore state
    
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE={sv.current_blobs}
  {% endif %}

[gcode_macro _BLOBIFIER_SAVE_STATE]
gcode:
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% set sv = {'current_blobs': count.current_blobs} %}
  SAVE_VARIABLE VARIABLE=blobifier VALUE="{sv}"

