[trad_rack]
# optional custom gcode
pre_unload_gcode:
    SAVE_GCODE_STATE NAME=PRE_UNLOAD_state
    {% if printer.virtual_sdcard.is_active %}
        {% set z_max = printer.toolhead.axis_maximum.z - printer.gcode_move.homing_origin.z %}
        {% set z_lift = printer["gcode_macro TR_Variables"].z_lift|float %}
        {% set x_park = printer["gcode_macro TR_Variables"].x_park|float %}
        {% set y_park = printer["gcode_macro TR_Variables"].y_park|float %}
        {% set do_x_park = printer["gcode_macro TR_Variables"].do_x_park %}
        {% set do_y_park = printer["gcode_macro TR_Variables"].do_y_park %}
        {% set st = printer["gcode_macro TR_Variables"].travel_speed * 60 %}
        {% set shape_tip = printer["gcode_macro TR_Variables"].shape_tip %}
        {% set use_wiper = printer["gcode_macro TR_Variables"].use_wiper %}
        {% set x = printer.gcode_move.gcode_position.x %}
        {% set y = printer.gcode_move.gcode_position.y %}
        {% set z = printer.gcode_move.gcode_position.z %}
        {% set z_park = [z + z_lift, z_max]|min %}
        
        SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=x VALUE={x}
        SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=y VALUE={y}
        SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=z VALUE={z}
        SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=saved_pos VALUE={True}
        SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=z_park VALUE={z_park}

        # lift z
        G90                     # absolute positioning
        G1 Z{z_park}            # move to z position

        # move to purge location
        {% if use_wiper %}
            Go_To_Purge_Location

        # park x and y
        {% else %}
            G90                 # absolute positioning
            {% if do_x_park %}
                {% set x = x_park %}
            {% endif %}
            {% if do_y_park %}
                {% set y = y_park %}
            {% endif %}
            G1 X{x} Y{y} F{st}  # move to x and y position
        {% endif %}

        # shape filament tip
        {% if shape_tip %}
            Shape_Tip
        {% endif %}
    {% else %}
        # move to purge location
        {% if use_wiper %}
            Go_To_Purge_Location
        {% endif %}

        # shape filament tip
        Shape_Tip
    {% endif %}
    RESTORE_GCODE_STATE NAME=PRE_UNLOAD_state

post_load_gcode:
    SAVE_GCODE_STATE NAME=POST_LOAD_state
    {% set use_wiper = printer["gcode_macro TR_Variables"].use_wiper %}
    {% if printer.virtual_sdcard.is_active %}
        {% set st = printer["gcode_macro TR_Variables"].travel_speed * 60 %}
        {% set take_frame = printer["gcode_macro TR_Variables"].take_frame %}
        {% set x = printer["gcode_macro TR_Variables"].x %}
        {% set y = printer["gcode_macro TR_Variables"].y %}
        {% set z = printer["gcode_macro TR_Variables"].z %}
        {% set saved_pos = printer["gcode_macro TR_Variables"].saved_pos %}
        {% set z_park = printer["gcode_macro TR_Variables"].z_park %}

        # take timelapse frame
        {% if take_frame %}
            TIMELAPSE_TAKE_FRAME
        {% endif %}

        # wipe nozzle
        {% if use_wiper %}
            Wipe_Nozzle
        {% endif %}

        # move to pre-toolchange position
        {% if saved_pos %}
            G90                     # absolute positioning
            G1 Z{z_park}            # restore z parking position
            G1 X{x} Y{y} F{st}      # restore original x and y position
            G1 Z{z}                 # restore original z position
            SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=saved_pos VALUE={False}
        {% endif %}

        Restore_Pressure_Advance    # restore PA from before ramming
    {% elif use_wiper %}
        Home_and_Wipe_Nozzle
    {% endif %}
    RESTORE_GCODE_STATE NAME=POST_LOAD_state

[gcode_macro TR_Variables]
description: Variables for use with Trad Rack pre unload and post load gcode
variable_z_lift:        0    # distance to lift z axis before toolchange
variable_x_park:        306.0     # x position to park before unloading
variable_y_park:        2.0   # y position to park before unloading
variable_do_x_park:     False   # whether to park x before unloading
variable_do_y_park:     False  # whether to park y before unloading
variable_travel_speed:  200     # how fast travel speeds will be performed
variable_shape_tip:     True   # whether to add tip-shaping gcode on unload during printing
                                # (set to False if you are using ramming from the slicer)
variable_take_frame:    False   # whether to take a timelapse frame after each toolchange
                                # requires: https://github.com/mainsail-crew/moonraker-timelapse
                                # (use "layermacro" mode)
variable_use_wiper:     False   # intended for the Annex K3 printer and requires
                                # Go_To_Purge_Location and Wipe_Nozzle gcode
                                # macros. Makes the toolchange occur over the
                                # purge bucket and wipes the nozzle before
                                # resuming the print. Variables relating to
                                # parking will be ignored if this is set to True
# don't change any of the variables below this line
variable_x:             0
variable_y:             0
variable_z:             0
variable_saved_pos:     False
variable_z_park:        0
gcode:

[gcode_macro Shape_Tip]
description: Perform tip-shaping, retraction, and cooling moves
gcode:
    SAVE_GCODE_STATE NAME=Shape_Tip_state
    Save_Pressure_Advance

    Slicer_Unload   # replace this with a different macro/gcode
                    # to change unloading

    Restore_Pressure_Advance
    RESTORE_GCODE_STATE NAME=Shape_Tip_state

[gcode_macro Set_Slicer_Unload_Preset]
description: Apply a preset of values to use for the Slicer_Unload macro
# params:
#   PRESET  Name of the preset to apply. Must match one of the variables below.
# see gcode_macro Slicer_Unload for variables that can be changed in a preset

# SuperSlicer presets
variable_asa_ss = {
    "filament_ramming_parameters": "120 110 5.32258 5.45161 5.67742 6 6.48387 7.12903 7.90323 8.70968 9.3871 9.83871 10.0968 10.2258| 0.05 5.30967 0.45 5.50967 0.95 6.1871 1.45 7.39677 1.95 9.05484 2.45 10 2.95 10.3098 3.45 13.0839 3.95 7.6 4.45 7.6 4.95 7.6",
    "superslicer": True}
variable_pla_ss = {
    "filament_ramming_parameters": "130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6",
    "superslicer": True}

# PrusaSlicer presets
variable_asa_ps = {
    "filament_ramming_parameters": "120 110 5.32258 5.45161 5.67742 6 6.48387 7.12903 7.90323 8.70968 9.3871 9.83871 10.0968 10.2258| 0.05 5.30967 0.45 5.50967 0.95 6.1871 1.45 7.39677 1.95 9.05484 2.45 10 2.95 10.3098 3.45 13.0839 3.95 7.6 4.45 7.6 4.95 7.6",
    "superslicer": False}
variable_pla_ps = {
    "filament_ramming_parameters": "130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6",
    "superslicer": False}

# presets should follow the format below:
# variable_<preset_name_in_lowercase> = {
#     "<variable1_name>": <variable1_value>,
#     "<variable2_name>": <variable2_value>,
#     "<variable3_name>": <variable3_value>}
gcode:
    {% set preset_name = params.PRESET|lower %}
    {% if preset_name in printer['gcode_macro Set_Slicer_Unload_Preset'] %}
        {% set preset = printer['gcode_macro Set_Slicer_Unload_Preset'].preset_name %}
        {% for key in preset %}
            SET_GCODE_VARIABLE MACRO=Slicer_Unload VARIABLE={key} VALUE={preset[key]}
        {% endfor %}
    {% else %}
        { action_raise_error("Preset \"%s\" does not exist" % preset_name) }
    {% endif %}

[gcode_macro Slicer_Unload]
# based on WipeTower::toolchange_Unload() from PrusaSlicer and SuperSlicer
description: Mimic ramming and unload behavior of PrusaSlicer or SuperSlicer
# params:
#   NEW_TEMPERATURE     extruder temperature to set

# printer settings
variable_cooling_tube_length = 12
variable_cooling_tube_retraction = 34

# filament settings
variable_filament_cooling_final_speed = 40
variable_filament_cooling_initial_speed = 20
variable_filament_cooling_moves = 4
variable_filament_diameter = 1.75
variable_filament_unloading_speed = 40
variable_filament_unloading_speed_start = 40
variable_filament_toolchange_delay = 0
variable_filament_ramming_parameters = "120 110 5.32258 5.45161 5.67742 6 6.48387 7.12903 7.90323 8.70968 9.3871 9.83871 10.0968 10.2258| 0.05 5.30967 0.45 5.50967 0.95 6.1871 1.45 7.39677 1.95 9.05484 2.45 10 2.95 10.3098 3.45 13.0839 3.95 7.6 4.45 7.6 4.95 7.6"

# filament settings only in SuperSlicer
variable_filament_enable_toolchange_temp = False
variable_filament_toolchange_temp = 200
variable_filament_use_fast_skinnydip = False
variable_filament_enable_toolchange_part_fan = True
variable_filament_toolchange_part_fan_speed = 50
variable_filament_use_skinnydip = True
variable_filament_skinnydip_distance = 24
variable_filament_melt_zone_pause = 0
variable_filament_cooling_zone_pause = 0
variable_filament_dip_insertion_speed = 33
variable_filament_dip_extraction_speed = 70

# other settings
variable_superslicer = True # whether to enable extra functionality only found in SuperSlicer
variable_do_ramming = True  # whether to include ramming
variable_do_unload = True   # whether to include retraction, cooling moves, and skinnydip
gcode:
    {% set NEW_TEMPERATURE = params.NEW_TEMPERATURE|default(0)|float %}
    {% set prev_temp_target = printer.extruder.target %}

    SAVE_GCODE_STATE NAME=Slicer_Unload_state
    Save_Pressure_Advance

    M83
    M220 S100
    SET_PRESSURE_ADVANCE ADVANCE=0
    
    # ramming
    {% if do_ramming %}
        # parse ramming parameters
        {% set ramming_speed = (filament_ramming_parameters.split('|')[0]).split(' ') %}

        # set ramming constants
        {% set filament_area = 3.1415 * (filament_diameter / 2) ** 2 %}

        # iterate through ramming speed values
        {% for i in range(2, ramming_speed|length) %}
            # calculate extrusion feedrate in mm/s
            {% set f = ramming_speed[i]|float / filament_area %}

            # calculate extrusion length in mm for a 0.25s move
            {% set e = f * 0.25 %}

            # do ramming move
            G1 E{e} F{f * 60}
        {% endfor %}
    {% endif %}

    # unload
    {% if do_unload %}
        # set toolchange temperature prior to retraction
        {% if superslicer and filament_enable_toolchange_temp and not filament_use_fast_skinnydip %}
            _Wait_for_Toolchange_Temp
        {% endif %}
        
        # retraction
        {% set total_retraction_distance = cooling_tube_retraction + cooling_tube_length / 2 - 15 %}
        G1 E-15 F{filament_unloading_speed_start * 60}
        G1 E-{0.70 * total_retraction_distance} F{1.0 * filament_unloading_speed * 60}
        G1 E-{0.20 * total_retraction_distance} F{0.5 * filament_unloading_speed * 60}
        G1 E-{0.10 * total_retraction_distance} F{0.3 * filament_unloading_speed * 60}

        # set temperature
        {% if not superslicer or not filament_enable_toolchange_temp %}
            {% if NEW_TEMPERATURE != 0 and (NEW_TEMPERATURE != prev_temp_target) %}
                M104 S{NEW_TEMPERATURE}
            {% endif %}

        # else return to the previously set temperature
        {% elif superslicer and filament_enable_toolchange_temp and not filament_use_fast_skinnydip %} 
            {% if NEW_TEMPERATURE != 0 %}
                M104 S{NEW_TEMPERATURE}
            {% else %}
                M104 S{prev_temp_target}
            {% endif %}
        {% endif %}

        # cooling moves
        {% set speed_inc = (filament_cooling_final_speed - filament_cooling_initial_speed) / (2 * filament_cooling_moves - 1) %}
        {% for i in range(filament_cooling_moves) %}
            {% set speed = filament_cooling_initial_speed + speed_inc * 2 * i %}
            G1 E{cooling_tube_length} F{speed * 60}
            {% set speed = speed + speed_inc %}
            G1 E-{cooling_tube_length} F{speed * 60}
        {% endfor %}

        # skinnydip
        {% if superslicer %}
            # wait for extruder to reach toolchange temperature
            {% if filament_enable_toolchange_temp and filament_use_fast_skinnydip %}
                _Wait_for_Toolchange_Temp
            {% endif %}

            # generate a skinnydip move
            {% if filament_use_skinnydip %}
                G1 E{filament_skinnydip_distance} F{filament_dip_insertion_speed * 60}
                G4 P{filament_melt_zone_pause}
                G1 E-{filament_skinnydip_distance} F{filament_dip_extraction_speed * 60}
                G4 P{filament_cooling_zone_pause}
            {% endif %}

            # ensure that proper hotend temperature is restored after skinnydip has finished meddling
            {% if filament_enable_toolchange_temp and filament_use_fast_skinnydip %}
                {% if NEW_TEMPERATURE != 0 %}
                    M109 S{NEW_TEMPERATURE}
                {% else %}
                    M109 S{prev_temp_target}
                {% endif %}
            {% elif filament_enable_toolchange_temp and filament_use_fast_skinnydip %}
                {% if NEW_TEMPERATURE != 0 and (NEW_TEMPERATURE != prev_temp_target) %}
                    M109 S{NEW_TEMPERATURE}
                {% endif %}
            {% endif %}
        {% endif %}

        # wait if necessary
        G4 P{filament_toolchange_delay}

        # (skip move to parking position)
    {% endif %}

    Restore_Pressure_Advance
    RESTORE_GCODE_STATE NAME=Slicer_Unload_state

[gcode_macro _Wait_for_Toolchange_Temp]
# based on wait_for_toolchange_temp() from SuperSlicer
description: Helper function for Slicer_Unload
gcode:
    {% set tc_temp = printer["gcode_macro Slicer_Unload"].filament_toolchange_temp %}
    {% set fan_on = printer["gcode_macro Slicer_Unload"].filament_enable_toolchange_part_fan %}
    {% set fan_speed = printer["gcode_macro Slicer_Unload"].filament_toolchange_part_fan_speed %}

    {% set prev_fan_speed = printer.fan.speed %}
    {% if fan_on %}
        M106 S{(fan_speed / 100.0 * 255)|int}
    {% endif %}
    M109 S{filament_toolchange_temp}
    {% if fan_on %}
        M106 S{(prev_fan_speed * 255)|int}
    {% endif %}

[gcode_macro Home_and_Wipe_Nozzle]
description: Home x and y if needed, then wipe the nozzle
gcode:
    # home x and y if needed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

    # wipe nozzle
    Wipe_Nozzle

[gcode_macro Save_Pressure_Advance]
# call this in your print start gcode after setting PA for the print
# (only necessary if the slicer inserts ramming gcode that sets PA to 0)
description: Save the current pressure advance value
# don't change any of the variables below this line
variable_pa: -1
gcode:
    # save PA if it is not 0
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=Save_Pressure_Advance VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro Restore_Pressure_Advance]
description: Restore saved pressure advance value
gcode:
    # restore PA if a previous value was saved
    {% if not (printer["gcode_macro Save_Pressure_Advance"].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro Save_Pressure_Advance"].pa}
    {% endif %}

[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 121)
variable_purge_x:       264  # x purge location
variable_purge_y:       324 # y purge location
variable_purge_x_entry: 264   # x entry location before going to the purge location
variable_purge_y_entry: 310 # y entry location before going to the purge location
variable_wipe_dx:       -80  # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       0 # distance to move in y from the purge position in order to wipe
variable_wipe_count:    7   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    140  # how fast to move when wiping
variable_purge_speed:   8   # how fast to extrude in mm/s when purging
variable_purge_fan:     40  # default fan speed out of 255 when purging
variable_wipe_fan:      150 # default fan speed out of 255 when wiping
gcode:

[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    SAVE_GCODE_STATE NAME=Go_To_Purge_Location_state
    G90

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

    RESTORE_GCODE_STATE NAME=Go_To_Purge_Location_state

[gcode_macro Wipe_Nozzle]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}
    
    {% if OLD_FAN_SPEED == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}
    
    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    SAVE_GCODE_STATE NAME=Wipe_Nozzle_state
    G90

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}
    
    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}
    
    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}
    purge_servo_IN
    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}
    purge_servo_OUT
    # restore fan speed
    M106 S{(old_Sf * 255)|int}

    RESTORE_GCODE_STATE NAME=Wipe_Nozzle_state

[gcode_macro Purge]
description: Extrude into the purge bucket
variable_purge_length: 60
variable_purge_length_minimum: 30
gcode:



    SAVE_GCODE_STATE NAME=Purge_state
    {% if params.FV %} # ======= PARAM PURGE LENGTH ==============================
      {action_respond_info("PURGE: param PURGE_LENGTH provided")}
      {% set purge_len = params.FV|float %}
    
    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("PURGE: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float %}
    {% endif %}

    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("PURGE: Purging %.2fmm of filament" % (purge_len|float))}
    {% set FE = params.new_filament_e_feedrate|default(240)|float %}
    
    purge_servo_OUT
    M106 S0
    G92 E0
    G1 E{purge_len} F{FE}
    G92 E0
    G1 E -0.4 F2000
    G92 E0
    M106 S255
    G4 P4000
    purge_servo_IN
    G4 P6000
    purge_servo_OUT
    M106 S0
    RESTORE_GCODE_STATE NAME=Purge_state